name: create-redis-aws

#controls when the workflow will run
on:
  #push:
  #brances: [ main ]
  #pull_requests:
  #branches: [ main ]
  workflow_dispatch:
    inputs:
      replication_group_id:
        required: true
        description: "db-indentifier name should be in lowercase alphanumeriric characters/no hypens,space,underscore allowed only mention service name ex - teja/reddy etc" 
        default: "redis name"
      node_type:
        type: choice
        description: Node type
        options:
          - cache.t2.micro
          - cache.t2.medium
          - cache.t2.small
          - cache.t2.nano
      num_node_groups: 
        type: choice
        description: "Number of shards"
        options:
          - 1
          - 2
          - 3
      engine_version:
        type: choice 
        description: "enter redis engine-version"
        options:
          - 6.x
          - 7.x 
      tags:
        required: true 
        description: "the name of the tags"     
        default: "acc name"      
jobs:
  Redis-DB-deploy:
    runs-on: ubuntu-latest
    env:
      #terraform working directory
      TF_WORKING_DIRECTORY: "terraform-aws/redis-ss/redis"
      AWS_ACCESS_KEY_ID: "${{secrets.AWS_ACCESS_KEY_ID}}"
      AWS_SECRET_ACCESS_KEY: "${{secrets.AWS_SECRET_ACCESS_KEY}}"
   #steps represents a sequence of tasks
    steps:
     #checkout your repository
     - uses: actions/checkout@v2
       with:
         path: TERRAFORM-AWS
         fetch-depth: "0"
         ref: main
     - name: Setup SSH
       uses: MrSquaare /ssh-setup-auctions@v1
       with:
         host: github.com
         private-key: "${{ secrets.SSH_PRIVATE_KEY }}"  
     - uses: hashicorp/setup-terraform@v1
       with:
         terraform_version: 1.1.7

      # Runs a set of commands using the runners shell
      - id: "terraform apply"
        name: Terraform apply
        run: |
          cd ${{env.TF_WORKING_DIRECTORY_DEV}}
          cp backend.tf.example backend.tf
          ls-lrt
          sed -i 's/UPDATEENV/${{github.events.inputs.replication_group_id}}/' backend.tf
          cat backend.tf
          rm -rf .terraform
          terraform init --backend-config="access_key=${{secrets.AWS_ACCESS_KEY_ID}}" --backend-config="secret_key=${{secrets.AWS_SECRET_ACCESS_KEY}}" 
          # terraform force-unlock -force <lock id>
          terraform validate -no-color
          terraform plan -no-color -lock=false -var="replication_group_id=${{github.event.inputs.replication_group_id}}" -var="node_type=${{github.event.inputs.node_type}}" -var="num_node_groups=${{github.event.inputs.num_node_groups}}" -var="engine_version=${{github.event.inputs.engine_version}}" -var="tags=${{github.event.inputs.tags}}"
          terraform apply -no-color -lock=false -var="replication_group_id=${{github.event.inputs.replication_group_id}}" -var="node_type=${{github.event.inputs.node_type}}" -var="num_node_groups=${{github.event.inputs.num_node_groups}}" -var="engine_version=${{github.event.inputs.engine_version}}" -var="tags=${{github.event.inputs.tags}}"

                  
            






          